<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yaya&#39;blog</title>
  
  <subtitle>To be a better miao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yybeatall.github.io/"/>
  <updated>2017-12-25T10:12:03.000Z</updated>
  <id>http://yybeatall.github.io/</id>
  
  <author>
    <name>yybeatall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>postman使用总结</title>
    <link href="http://yybeatall.github.io/2017/12/13/postman%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yybeatall.github.io/2017/12/13/postman%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2017-12-13T08:51:00.000Z</published>
    <updated>2017-12-25T10:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始熟悉postman，是公司进入新系统的起步阶段，在开发搭建框架时期，为了能尽早进入测试，需要对API进行测试。<br>中期过于忙碌也就忘记了去做下总结，现在开始好好撸一下。具体的总结还是官网最权威和详细<a href="http://www.postmanlabs.com/postman-docs/" target="_blank" rel="noopener">http://www.postmanlabs.com/postman-docs/</a>,这里就针对自己的使用总结下注意的地方。</p><h2 id="1-基本的使用——get-post请求"><a href="#1-基本的使用——get-post请求" class="headerlink" title="1.基本的使用——get/post请求"></a>1.基本的使用——get/post请求</h2><p>最开始接触postman是个chrome的插件应用，现在已经独立成了单独的App，增加了很多功能，用起来更加顺畅了<del>~</del>(～￣▽￣)～</br><br><a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman App 下载</a></p><h3 id="1-创建一个接口请求"><a href="#1-创建一个接口请求" class="headerlink" title="1.创建一个接口请求"></a>1.创建一个接口请求</h3><p><img src="creatrequest.png" alt=""></p><p>可将一类的接口请求保存归类到指定文件夹下</br><br><img src="creatrequest2.png" alt=""></p><p>创建时，可以添加描述，以及备忘（特别是开发初期可能来不及整理接口文档，测试可以做好备忘，比如哪些字段未做校验，以便后期复查）<br><img src="post.png" alt=""></p><p>在尝试请求得到的结果可以保存为例子，之后对返回值验证时可以用来参考结构和类型<br><img src="example.png" alt=""></p><p>另外，请求接口中的地址也可以通过变量进行设定，用<code>:param</code>来设定<br><img src="params1.png" alt=""></p><p>post的body中binary可传输一些图片，video文件<br><img src="post2.png" alt=""></p><p>有点时候需要测试多个环境，可通过环境变量对host进行管理。<br>通过参数引用环境变量<br><img src="environment1.png" alt=""></p><p>在右上角设置按钮，设置管理环境变量<br><img src="environment2.png" alt=""></p><p>可以在这里进行host的设置，以及一些变量的初始值的设定，也可以通过script在请求前后进行设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm.environment.set(<span class="string">"variable_key"</span>, <span class="string">"variable_value"</span>);</span><br></pre></td></tr></table></figure><p><img src="environment3.png" alt=""><br></br></p><h2 id="2-script"><a href="#2-script" class="headerlink" title="2.script"></a>2.script</h2><p><strong>发送请求前</strong>，通过Pre-request script添加请求接口前的数据准备，比如多次请求一个接口，但是参数有重复性校验，可以在这里生成随机数赋给参数（第二张图为参数的引用）。</p><p><strong>发送请求后</strong>，可以通过test部分对返回值进行校验，也可以获取其中某个返回值，用于接下来的请求，最典型的的例子就是通过登录接口获取token，用于其他接口的请求。</p><p>右侧有语法使用例子，很方便。<br><img src="pre-request.png" alt=""></p><p><img src="params0.png" alt=""></p><p><strong>这里总结下经常使用的几个语法例子</strong></p><p>pre-request：</p><ul><li>设置全局变量（生成一个随机编号）</li></ul><p>引用时，可使用<code>globals.param</code>或者<code>globals[&quot;param&quot;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postman.setGlobalVariable(<span class="string">"goodsno"</span>, timestamp);</span><br></pre></td></tr></table></figure></br>- 把一个变量付给另一个<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postman.setGlobalVariable(<span class="string">"oldpassword"</span>, globals[<span class="string">"password"</span>]);</span><br></pre></td></tr></table></figure></br>- 顺序生成00001~00099编号（笨笨的拼出来的）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(globals.b) &gt;= <span class="number">1</span> &amp;&amp; <span class="number">9</span> &gt; <span class="built_in">parseInt</span>(globals.b))</span><br><span class="line">&#123;</span><br><span class="line">   postman.setGlobalVariable(<span class="string">"b"</span>, <span class="built_in">parseInt</span>(globals.b)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> bh=<span class="string">"0000"</span>+globals.b;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b1"</span>, <span class="built_in">parseInt</span>(globals.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">parseInt</span>(globals.b) &gt;= <span class="number">9</span>)&#123;</span><br><span class="line">    postman.setGlobalVariable(<span class="string">"b"</span>, <span class="built_in">parseInt</span>(globals.b)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> bh=<span class="string">"000"</span>+globals.b;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b2"</span>, <span class="built_in">parseInt</span>(globals.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    postman.setGlobalVariable(<span class="string">"b"</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> bh=<span class="string">"0000"</span>+globals.b;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b3"</span>, <span class="built_in">parseInt</span>(globals.b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br>test:<ul><li>判断接口返回状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tests[<span class="string">"Status code is 200"</span>] = responseCode.code === <span class="number">200</span>;</span><br></pre></td></tr></table></figure></br></li><li>判断返回项目是否包含某个字段<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tests[<span class="string">"Body matches addr_hash"</span>] = responseBody.has(<span class="string">"addr_hash"</span>);</span><br></pre></td></tr></table></figure></br></li><li>返回数值的校验<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(responseBody);</span><br><span class="line">tests[<span class="string">"Your test username"</span>] = jsonData[<span class="number">0</span>].name === <span class="string">"名字"</span>;</span><br></pre></td></tr></table></figure></br></li><li>返回结果的结构和类型的校验</li></ul><p>这里接口文档返回的数值型是long，而script对应的是number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(responseBody);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> schema = &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">     <span class="string">"properties"</span>:&#123;</span><br><span class="line">         <span class="string">"token"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"string"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">"username"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"string"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"login_times"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"last_login_at"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"id"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"status"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">"employee_id"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"last_failed_login_times"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"number"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"created_at"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"string"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"updated_at"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"string"</span> </span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="string">"deleted_at"</span>:&#123;</span><br><span class="line">            <span class="string">"type"</span>: [<span class="string">"string"</span>,<span class="string">"null"</span>]</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tests[<span class="string">"Valid response schema"</span>] = tv4.validate(jsonData, schema);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Validation failed: "</span>, tv4.error);</span><br></pre></td></tr></table></figure></br>- 把时间戳转为为普通日期格式(去掉秒数)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time2 = <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(jsonData.order.created_at) * <span class="number">1000</span>).toLocaleString().replace(<span class="regexp">/:\d&#123;1,2&#125;$/</span>, <span class="string">' '</span>);</span><br></pre></td></tr></table></figure></br><p>ps.利用 Dev tools查看script的console log，便于对script的调试<br><img src="script.png" alt=""><br></br></p><h2 id="3-collection"><a href="#3-collection" class="headerlink" title="3.collection"></a>3.collection</h2><p>利用collection runner可以将多个接口请求串联起来一次执行，完成一个业务场景的用例；并且可以通过data file的导入（支持json和cvs/text格式）进行同一场景的多条测试用例的执行。</p><p>用文件夹管理需要执行的接口们，可以切换执行的环境，次数（可以多次请求来查看服务端承受的压力能力），延迟时间，导入数据。<br><img src="collection1.png" alt=""></p><p>点击执行后，可以看到每个接口的请求记录，以及test的执行情况，点击每个接口的链接，可以查看具体的request和respose请求记录，但是response显示的数量有限，可以通过console工具进行查看（执行collection前打开）</p><p><img src="collection2.png" alt=""></p><p>具体的request和respose请求记录<br><img src="collection7.png" alt=""></p><p>console工具<br><img src="collection4.png" alt=""></p><p>添加数据文件（我一般都是从excel贴出，所以cvs比较方便）<br>点击preview查看导入详情，这里遇到一个问题，如果最后一列想导入数字，只有最后一个数字可以被识别为数字，其他都会自动加上双引号，目前只能在最后加上一列不使用的列，之后需要寻找下是否有其他方法<br><img src="collection5.png" alt=""></p><p>在请求参数中记录对应cvs第一行的参数，就可以将多条数据对应起来，script中可以通过<code>data.</code>来获取导入文件中的数据<br><img src="collection6.png" alt=""></p></br>## 以上还有部分付费功能并没有去了解，目前这些对于日常工作的接口验证还是可以应对。]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始熟悉postman，是公司进入新系统的起步阶段，在开发搭建框架时期，为了能尽早进入测试，需要对API进行测试。&lt;br&gt;中期过于忙碌也就忘记了去做下总结，现在开始好好撸一下。具体的总结还是官网最权威和详细&lt;a href=&quot;http://www.postmanlabs.co
      
    
    </summary>
    
    
    
      <category term="接口测试" scheme="http://yybeatall.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>测试工作总结</title>
    <link href="http://yybeatall.github.io/2017/07/22/%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%EF%BC%88-%EF%BC%89/"/>
    <id>http://yybeatall.github.io/2017/07/22/%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%EF%BC%88-%EF%BC%89/</id>
    <published>2017-07-22T06:27:25.000Z</published>
    <updated>2018-03-19T10:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>从做开发转行测试已经两年多了，期间的信誓旦旦由于小鱼的到来搁置了许久，是时候静下心来总结下自己这几年的工作~~</p><p>现在有很多测试方法，这里就记录下自己比较常用的方法。</p><h2 id="开发-测试的那几年"><a href="#开发-测试的那几年" class="headerlink" title="开发/测试的那几年"></a>开发/测试的那几年</h2><p>大学学的是软件+日语，一个在大连很容易找到工作的专业（有很多日企软件工作），但中二患者看中的还是可以去日本的机会，同时也发现写代码也挺有意思，你费劲心思码呀码，一下跑出来的时候超有成就感&gt;0&lt;~~</p><h3 id="1-单元-结合测试（白盒测试）"><a href="#1-单元-结合测试（白盒测试）" class="headerlink" title="1.单元/结合测试（白盒测试）"></a>1.单元/结合测试（白盒测试）</h3><p>大学的编程基础在外包公司基本上是够用，因为大部分的时间都是在读代码，理解逻辑，做影响分析，最后可能只会锁定几行代码，进行修改，但是由于大部分做的是维护项目，所以后续要做大量的单元测试和结合测试。</p><p>1.判断语句：无论是基于代码逻辑中的判断语句，还是sql中的where条件，基本遵守以条件会影响结果为前提的N+1原则，比如A&amp;B，需要测试A错误，B错误，以及A和B都正确；A|B，需要测试A正确，B正确，以及A和B都错误。</p><p>2.循环语句：对于循环语句中的逻辑判断基于1，循环次数一般按照0，1，2次数进行用例设计</p><p>3.异常处理：很多数据异常错误，可以切断数据库，或者在代码中加断点改变数据进行测试。</p><p>4.数据更新语句：sql中涉及新增语句时，需要设计边界值用例。</p><p>5.判定表：测试文章读到的时候才发现自己一直用的东西原来叫这个名字，大部分的用例都会根据详细设计逻辑，做成判定表，并以此准备测试测试数据。画风大概是这样<br><img src="%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%931.jpg" alt=""></p><h3 id="2-系统测试（功能测试）"><a href="#2-系统测试（功能测试）" class="headerlink" title="2.系统测试（功能测试）"></a>2.系统测试（功能测试）</h3><p>结合测试偏向于系统测试的小模块测试，也需要全条件覆盖，但系统测试偏向于业务，可能就会从中剔除很多业务根本不会涉及的场景。但是要覆盖整个系统的功能测试量也相当大。</p><h3 id="3-浏览器兼容性测试"><a href="#3-浏览器兼容性测试" class="headerlink" title="3.浏览器兼容性测试"></a>3.浏览器兼容性测试</h3><p>这是当年我最不喜欢做的测试，客户很老，要从IE6开始测，而且要测试不同版本环境中浏览器的兼容性，每天都要和同事争抢虚拟机也是醉了，还要全部截图，好处是不太需要动脑子- -</p><h3 id="4-perfomance测试"><a href="#4-perfomance测试" class="headerlink" title="4.perfomance测试"></a>4.perfomance测试</h3><p>当时做的性能测试没有现在这么多要素，如果是批处理程序，客户会给出一年的数据，以及每年的增长率，我们会模拟出未来三年和五年的数据进行压力测试。如果是前端页面加载，利用firebug记录页面的响应时间。</p><h3 id="5-random测试"><a href="#5-random测试" class="headerlink" title="5.random测试"></a>5.random测试</h3><p>现在想想，我当年做人工做这个测试就是在扮演monkey😂</p><h2 id="测试的这几年"><a href="#测试的这几年" class="headerlink" title="测试的这几年"></a>测试的这几年</h2><p>跟随迁徙猿来到上海后，进入了一个创业公司，转行正式做测试（正式。。哈哈。。）</p><p>虽说这几年接触到些自动化测试的框架，也试着自己写写脚本，但真正出货的还是手动测试，觉得更有价值的是探索测试。<br>在基于之前经验结合需求文档编写测试用例并实施后，探索测试会发现很多隐藏的问题。这面工作的快速迭代决定了无论从需求还是开发考虑可能都不会十分全面，探索测试更像在找茬补漏。</p><h3 id="1-web端测试："><a href="#1-web端测试：" class="headerlink" title="1.web端测试："></a>1.web端测试：</h3><ul><li><strong>前端界面</strong>：<br><br>1.正确性：画面与原型图一致，图片文字正常显示，输入框，按钮等像素大小检查（chrome-web developer）；<br><br>2.可用性：①是否满足软件需求说明，覆盖业务功能点。<br>②输入内容合理性测试，如手机号码格式，入力字段是否有唯一check，是否必填③画面链接测试，跳转，返回。<br><br>3.边界条件：入力框位数限制，特殊字符测试，复制粘贴测试。（等价类划分）<br><br>4.浏览器兼容性测试：各种主流浏览器稳定版本的兼容性，前端技术对版本的兼容。<a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">https://kangax.github.io/compat-table/es6/</a><br><br>5.性能测试：响应时间（chrome-web developer-memory）<a href="https://blog.gmem.cc/detect-memleaks-with-devtools?nsukey=iQpRTeE4IynDrnZpu5h0UTkco0U9h6m7teJzX8nUnntYhzq6TZu4sF9ICRP7ZKo3S4VJ8jgJQ06hnLtTLGOJQuTDRuze3xkmj6aLEh4lzM2M9YcOsw%2FF6pds55lJyUZhi59QhqJDPoddviXjerR94hHvgGhAhB7PFKjmCk%2BBMiD0WXuONgBIb04liiZumBFKsXD8To218vTvGFYEZLsXYw%3D%3D" target="_blank" rel="noopener">内存泄漏</a><br></li><li><strong>功能逻辑：</strong><br><br>1.数据显示的正确性（在填写字段时可将内容与填入项目名称对应起来，便于快速定位到错误字段 ）<br><br>2.对于涉及增删改操作的数据字段，需要查看对应的数据结构文档，看看是否在其他处引用，看看字段类型和长度是否适合。（eg. 之前发现一个bug，企业下的一个业务方的字段会在某种情况下成为企业名称，在最初设计时两个名称的长度限制不一致，会导致编辑报错）<br><br>3.设计操作权限的测试要尤为重视。<br><br>4.并发测试：eg. 创建询价单A，包含任务1，在询价单A调度时，同时创建一个询价单B也包含任务1，此时询价单A调度成功，询价单B没有被作废，询价单B指派司机，司机报名后，调度给司机，一直可以调度成功。<br><br>5.其他：二维码需要动态处理：eg.任何地方出现的物流控App的下载二维码图片都不能用静态图</li></ul><h3 id="2-移动端测试："><a href="#2-移动端测试：" class="headerlink" title="2.移动端测试："></a>2.移动端测试：</h3><p>1.版本覆盖问题，追加新功能后需要确定之前版本的兼容问题，（eg.秀足迹，将关联货跟的秀足迹改为关联轨迹，需要检查以前版本该功能是否出错，并且不会对货跟和消息产生影响，并作出相应的提示。）<br><br>2.系统升级后的兼容问题，新出来的系统，去通读官方的changelog是第一时间要做的事情，通过官方的更改日志来比对自己的App会有哪些受影响。<br><br>3.断网测试，慢网测试,iOS的开发者模式下可以设置慢网络，也可以利用抓包工具进行设置。<br><br>4.系统待机,关机对应用的影响(eg.有些安卓机，待机进入省电模式，内存对时间的计算会出现误差，比如每隔一段时间上传一次定位点)<br><br>5.安装测试：软件的安装途径。(安卓)<br><br>6.多分辨率测试(安卓)<br><br>7.物理按键：退回 home 菜单键 ，在不同页面的效果，系统自带功能测试，手势，照相，返回等。<br><br>8.电量消耗和流量消耗</p><h3 id="3-接口测试"><a href="#3-接口测试" class="headerlink" title="3.接口测试"></a>3.接口测试</h3><p>1.利用postman，对比接口文档，对其正常的功能性，返回数据的名称，类型，数据格式进行检验。<br><br>2.利用postman中的collection，导入cvs数据用例，测试多业务场景。<br><br>3.对于异常情况，缺少参数，边界值，多参数，类型异常等，检验接口的容错性。<br><br>4.接口性能，利用siege工具，对接口进行简单的压测。</p><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><p>往往在求职中我们才会发现自己的各种不足，才会饥渴地吸纳着各种知识，去想一想自己到底做了什么，会什么，还是希望自己能够保持这种状态在以后的生活中，去等待一切水到渠成。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从做开发转行测试已经两年多了，期间的信誓旦旦由于小鱼的到来搁置了许久，是时候静下心来总结下自己这几年的工作~~&lt;/p&gt;
&lt;p&gt;现在有很多测试方法，这里就记录下自己比较常用的方法。&lt;/p&gt;
&lt;h2 id=&quot;开发-测试的那几年&quot;&gt;&lt;a href=&quot;#开发-测试的那几年&quot; cla
      
    
    </summary>
    
    
    
      <category term="工作总结" scheme="http://yybeatall.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>windows下appium安装运行实践</title>
    <link href="http://yybeatall.github.io/2017/03/01/windows%E4%B8%8Bappium%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yybeatall.github.io/2017/03/01/windows%E4%B8%8Bappium%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2017-03-01T03:04:15.000Z</published>
    <updated>2018-03-08T02:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装前的配置"><a href="#安装前的配置" class="headerlink" title="安装前的配置"></a>安装前的配置</h2><h3 id="1-ANDROID-HOME"><a href="#1-ANDROID-HOME" class="headerlink" title="1.ANDROID_HOME"></a>1.ANDROID_HOME</h3><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">下载andriod sdk</a></p><ul><li>windows系统环境变量设置:<br/><br>ANDROID_HOME=sdk路径<br/><br>path中加入sdk的tools和platform-tools路径<br/></li></ul><h3 id="2-JAVA-HOME"><a href="#2-JAVA-HOME" class="headerlink" title="2.JAVA_HOME"></a>2.JAVA_HOME</h3><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载jdk</a></p><ul><li>windows系统环境变量设置：<br/><br>JAVA_HOME=指定jdk路径—不要指定bin目录，andriod studio会启动不起来<br/><br>path中加入jdk路径和bin路径</li></ul><h3 id="3-ADB"><a href="#3-ADB" class="headerlink" title="3.ADB"></a>3.ADB</h3><p>“Android 调试桥 (adb) 是一个通用命令行工具，其允许您与模拟器实例或连接的 Android 设备进行通信。 ”<br/></p><p>sdk的platform-tools目录下，1中已经设定。<br/><br>cmd中输入adb既可使用。</p><p><a href="https://developer.android.com/studio/command-line/adb.html?hl=zh-cn" target="_blank" rel="noopener">adb命令</a></p><h3 id="4-python"><a href="#4-python" class="headerlink" title="4.python"></a>4.python</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">下载</a></p><ul><li>windows系统环境变量设置:<br/><br>path中加入python地址,cmd中输入python既可使用。</li></ul><h3 id="5-selenuim类库"><a href="#5-selenuim类库" class="headerlink" title="5.selenuim类库"></a>5.selenuim类库</h3><p>Appium-Python-Client依赖于selenuim类库</p><p><a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="noopener">下载</a><br>在selenium目录下输入:<br/></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h3 id="5-Appium-Python-Client-0-24安装包"><a href="#5-Appium-Python-Client-0-24安装包" class="headerlink" title="5.Appium-Python-Client-0.24安装包"></a>5.Appium-Python-Client-0.24安装包</h3><p>里面是appium相关的类库</p><p><a href="https://github.com/appium/python-client" target="_blank" rel="noopener">下载</a></p><p>在client目录下输入<br/></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><p>看到提示成功</p><p><img src="appium1.png" alt=""></p><h2 id="appium-GUI-安装"><a href="#appium-GUI-安装" class="headerlink" title="appium GUI 安装"></a>appium GUI 安装</h2><ul><li>直接下载安装包</li></ul><p><a href="http://appium.io/" target="_blank" rel="noopener">下载地址</a></p><ul><li>启动模拟器或外接设备，获取device id</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br></pre></td></tr></table></figure><p><img src="appium3.png" alt=""></p><p>在下面填入对应的andriod设备信息</p><p><img src="appium4.png" alt=""></p><p>如果使用天天模拟器：<br/><br>1.设置usb调试<br/><br>2.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb connect <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6555</span></span><br></pre></td></tr></table></figure><ul><li>使用doctor进行检查配置</li></ul><p>windows版没有doctor的按钮，需要自己下载doctor插件，用npm安装（npm使用之前需要安装node.js）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install appium-doctor -g</span><br></pre></td></tr></table></figure><p>输入appium-doctor进行检测–都ok的话安装就完成了。</p><p><img src="appium5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装前的配置&quot;&gt;&lt;a href=&quot;#安装前的配置&quot; class=&quot;headerlink&quot; title=&quot;安装前的配置&quot;&gt;&lt;/a&gt;安装前的配置&lt;/h2&gt;&lt;h3 id=&quot;1-ANDROID-HOME&quot;&gt;&lt;a href=&quot;#1-ANDROID-HOME&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="appium" scheme="http://yybeatall.github.io/tags/appium/"/>
    
  </entry>
  
</feed>
